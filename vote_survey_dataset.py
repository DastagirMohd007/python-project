# -*- coding: utf-8 -*-
"""vote survey dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12tkdswF-M-agzOznCi4BMg340Vz_eavi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

survey = pd.read_csv('/content/Survey Dataset - Technical Interview.csv')

"""##Question 2 - How many samples were collected on each day?"""

survey.head(2)

survey['collection_date'].value_counts()

"""##Question 3 - What proportion of the total respondents were aged less than 45?"""

survey.age.dtype

survey.age.unique()

survey.age.value_counts()

survey['age'] = survey['age'].replace({'24ko': 24})

survey['age']=survey.age.astype(int)

survey.age.dtype

survey.head()

survey[survey['age']<45]

"""#Question 4 - Create a new column in the dataframe “age_group”. This column should contain the age group the respondent belongs to. The age groups are 18-25, 25-40, 40-55 and 55+. The dataframe should look like this after the column creation.

"""

survey.head(2)

data1=data[(data['age']>=18)&(data['age']<=25)]



data1.age_group.unique()

data1['age_group']='18-25'











data= survey.copy()
data

#data.insert('new_column_postion','new_column_age','new_postion_values')
data.insert(10,'age_group',survey.age)

data.head(2)

data[(data['age_group']>=18) & (data['age_group']<=55)|(data.age_group<55)]

"""#Question 5 - How many samples were collected for each age-group? Which age-group had the most samples?"""

survey.head(2)

data.age.value_counts()

"""#Question 6 - What proportion of the respondents had opted for the RJD party in both the Vote_Now and the Past_Vote questions?

"""

survey.head(11)

survey[(survey.Vote_Now == 'RJD')&(survey.Past_Vote=='RJD')]

"""#Question 7 - For each day of sample collection, determine the proportion of respondents who were fully satisfied with the performance of the CM. So if there were a total of 1000 samples on day 1 and 300 out of those said they were fully satisfied, then our answer for that day would be 0.3."""

survey.head(2)

cm=survey[survey.CM_satisfaction=='Fully Dissatisfied']
cm.head()

a=cm['collection_date'].value_counts()
a

b=survey['collection_date'].value_counts()
b

c=a/b*100
c

survey['collection_date'].unique()

survey.head(2)

"""#question 8 - In a similar fashion create a day-wise proportion of respondents that opted fully dissatisfied with their MLA. Create a line plot of the result with date on x-axis and proportions on the y-axis."""

sns.lineplot(survey.MLA_satisfaction=='Fully Dissatisfied',survey.collection_date)

survey.MLA_satisfaction=='Fully Dissatisfied'

"""##Question 9 - Create a pivot-table (or crosstab) with index as Past_Vote, Column as Vote_Now and cell values as the count of samples."""

survey.pivot_table(index='Past_Vote',columns='Vote_Now',values='response_id',aggfunc='count')

"""#
Question 10 - Repeat the above question with the cell values as the sum of “weight”.
"""

survey.pivot_table(index='Past_Vote',columns='Vote_Now',values='weight',aggfunc='sum')

survey.head(2)

"""#Question 11 - Create a dataframe by performing a group by over age_group and calculate the count of total samples under each age_group."""

data.groupby('age_group').count()







data.head(1)

"""#Question 12 - Create a dataframe by performing a group by over age_group and finding the count of total samples for each age_group that opted for the JD(U) party in Vote_Now."""

data.groupby('age_group').count()











